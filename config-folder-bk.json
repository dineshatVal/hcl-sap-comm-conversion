{
  "system_prompt": {
    "description": "Converts HCL Commerce Command framework code to SAP Commerce Spring framework code.",
    "error_response": {"error": "string"},
    "templates": {
      "spring_controller": "package com.example;\n\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport com.example.ResponseDTO;\n\n@RestController\npublic class {class_name}Controller {{\n    private final {class_name}{target_layer} {class_name_lower}{target_layer};\n    public {class_name}Controller({class_name}{target_layer} {class_name_lower}{target_layer}) {{\n        this.{class_name_lower}{target_layer} = {class_name_lower}{target_layer};\n    }}\n    @PostMapping(\"/api/{class_name_lower}\")\n    public ResponseDTO execute(@RequestBody {class_name}DTO request) {{\n        return {class_name_lower}{target_layer}.execute(request);\n    }}\n}}",
      "spring_facade": "package com.example;\n\nimport org.springframework.stereotype.Component;\nimport com.example.ResponseDTO;\nimport de.hybris.platform.core.model.order.OrderModel;\nimport de.hybris.platform.order.OrderService;\nimport de.hybris.platform.servicelayer.model.ModelService;\n\n@Component\npublic class {class_name}Facade {{\n    private final {class_name}Service {class_name_lower}Service;\n    private final OrderService orderService;\n    private final ModelService modelService;\n\n    public {class_name}Facade({class_name}Service {class_name_lower}Service, OrderService orderService, ModelService modelService) {{\n        this.{class_name_lower}Service = {class_name_lower}Service;\n        this.orderService = orderService;\n        this.modelService = modelService;\n    }}\n    public ResponseDTO execute({class_name}DTO request) {{\n        ResponseDTO response = new ResponseDTO();\n        try {{\n            if ({required_properties_check}) {{\n                OrderModel order = orderService.getOrderForCode(request.getOrderId());\n                if (\"CREDIT_CARD\".equals(request.getPaymentMethod()) && \"PENDING\".equals(order.getStatus().getCode())) {{\n                    response.setStatus(\"success\");\n                    response.setOrderId(request.getOrderId());\n                    response.setMessage(\"Order processed successfully\");\n                }} else {{\n                    response.setStatus(\"failure\");\n                    response.setError(\"Invalid payment method or order status\");\n                }}\n            }} else {{\n                response.setStatus(\"failure\");\n                response.setError(\"Missing required fields\");\n            }}\n        }} catch (Exception e) {{\n            response.setStatus(\"failure\");\n            response.setError(\"Error processing order: \" + e.getMessage());\n        }}\n        return response;\n    }}\n}}",
      "spring_service": "package com.example;\n\nimport org.springframework.stereotype.Service;\nimport com.example.ResponseDTO;\nimport de.hybris.platform.core.model.order.OrderModel;\nimport de.hybris.platform.order.OrderService;\n\n@Service\npublic class {class_name}Service {\n    private final OrderService orderService;\n\n    public {class_name}Service(OrderService orderService) {\n        this.orderService = orderService;\n    }\n    public ResponseDTO execute({class_name}DTO request) {\n        ResponseDTO response = new ResponseDTO();\n        try {\n            OrderModel order = orderService.getOrderForCode(request.getOrderId());\n            response.setStatus(\"success\");\n        } catch (Exception e) {\n            response.setStatus(\"failure\");\n            response.setError(\"Service error: \" + e.getMessage());\n        }\n        return response;\n    }\n}",
      "dto": "package com.example;\n\npublic class {class_name}DTO {\n{fields}\n{getters_setters}\n}",
      "response_dto": "package com.example;\n\npublic class ResponseDTO {\n    private String status;\n    private String orderId;\n    private String message;\n    private String error;\n    public String getStatus() { return status; }\n    public void setStatus(String status) { this.status = status; }\n    public String getOrderId() { return orderId; }\n    public void setOrderId(String orderId) { this.orderId = orderId; }\n    public String getMessage() { return message; }\n    public void setMessage(String message) { this.message = message; }\n    public String getError() { return error; }\n    public void setError(String error) { this.error = error; }\n}",
      "spring_config": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"{class_name_lower}Service\" class=\"com.example.{class_name}Service\">\n        <constructor-arg ref=\"orderService\"/>\n    </bean>\n{facade_bean}    <bean id=\"{class_name_lower}Controller\" class=\"com.example.{class_name}Controller\">\n        <constructor-arg ref=\"{class_name_lower}{target_layer}\"/>\n    </bean>\n</beans>",
      "facade_bean": "    <bean id=\"{class_name_lower}Facade\" class=\"com.example.{class_name}Facade\">\n        <constructor-arg ref=\"{class_name_lower}Service\"/>\n        <constructor-arg ref=\"orderService\"/>\n        <constructor-arg ref=\"modelService\"/>\n    </bean>\n",
      "impex": "INSERT_UPDATE Order;code[unique=true];user(uid);paymentType(code)\n;{class_name_lower}_{order_id};{user_id};{payment_method}"
    },
    "facade_conditions": {
      "if_statement": true,
      "min_put_calls": 2,
      "command_context": true
    },
    "property_mappings": {
      "orderId": {"dto_field": "orderId", "impex_field": "code", "required": true},
      "userId": {"dto_field": "userId", "impex_field": "user(uid)", "required": true},
      "paymentMethod": {"dto_field": "paymentMethod", "impex_field": "paymentType(code)", "required": true}
    }
  }
}