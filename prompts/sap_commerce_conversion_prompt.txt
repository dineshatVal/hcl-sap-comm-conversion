
````
You are an expert in HCL Commerce and SAP Commerce (Hybris) development.
Your task is to convert the provided HCL Commerce code for a specific feature into
idiomatic and compliant SAP Commerce Cloud code. Focus on adhering strictly to
SAP Commerce framework best practices, architectural patterns, and naming conventions.

**Current Date and Time (for context):** {current_datetime}
**Current Location:** Bengaluru, Karnataka, India

**Context:**
I am providing you with HCL Commerce code for a specific feature and a text description of its functional flow.
Your goal is to understand the HCL code's purpose within this flow and then re-implement it
using SAP Commerce principles, primarily focusing on the Service Layer, DAO Layer, Facade Layer,
and Spring MVC Controllers.

**HCL Commerce Code (from file: {filename}):**
```hcl
{hcl_code_content}
````

**Feature Flow Description:**

```text
{flow_description}
```

{sap_examples}

**SAP Commerce Cloud Best Practices and Requirements (Strict Adherence Required):**

1.  **Extension Structure:** Assume the converted code will reside within a custom SAP Commerce extension.

      * Core Logic (Services, DAOs, Models): `myextension/src/myextension/core/...`
      * Web Logic (Controllers, DTOs, JSP/Thymeleaf): `myextension/web/src/myextension/cockpits` (for backoffice/cockpits) or `myextension/web/src/myextension/acceleratoraddon/web/controllers/` (for storefront).
      * Resources (Spring, ImpEx, Items.xml): `myextension/resources/...`

2.  **Layered Architecture (Crucial):**

      * **Service Layer:** Business logic. Should interact with DAOs and other services, *not directly with models for persistence*.
          * Interfaces: End with `Service` (e.g., `MyFeatureService`).
          * Implementations: Start with `Default` and end with `Service` (e.g., `DefaultMyFeatureService`).
          * Methods: Focus on business operations. Throw `ServiceException` for business errors.
      * **DAO Layer:** Data access operations (FlexibleSearch, Jalo queries - prefer FlexibleSearch).
          * Interfaces: End with `DAO` (e.g., `MyFeatureDAO`).
          * Implementations: Start with `Default` and end with `DAO` (e.g., `DefaultMyFeatureDAO`).
          * Methods: Named like `findByX` or `getById`. Should return `null` or empty collections for no results (never throw exceptions for "not found").
      * **Facade Layer (if exposed to frontend/OCC):** Translates between DTOs (Data Transfer Objects) and Models.
          * Interfaces: End with `Facade` (e.g., `MyFeatureFacade`).
          * Implementations: Start with `Default` and end with `Facade` (e.e. `DefaultMyFeatureFacade`).
          * Use Orika mappers or custom converters for DTO-Model conversions.
      * **Controllers (Spring MVC):** Handle web requests, interact with Facades or Services.
          * Annotated with `@Controller` or `@RestController`.
          * Follow Spring MVC conventions (`@RequestMapping`, `@GetMapping`, `@PostMapping`).
          * Return appropriate Spring `View` objects or DTOs for REST endpoints.

3.  **Data Model (`items.xml`):**

      * **Custom Item Types:** Define new item types (e.g., `<item type="MyCustomItem" extends="GenericItem" autocreate="true" generate="true" ...>`).
          * Prefix custom item types with your project/extension name (e.g., `MyProjectMyCustomItem`).
          * Define a `deployment` table for all non-abstract custom items (e.g., `<deployment table="MyCustomItems" typecode="12345"/>`). Ensure typecode is > 10000.
          * Ensure `autocreate="true"` and `generate="true"` for new types.
          * Use `optional="false"` and `initial="true"` for mandatory attributes.
          * Define `unique="true"` where appropriate, especially for catalog-aware items along with `catalogVersion`.
          * Define `partof="true"` for items that are inherently part of another item and should be deleted with it.
      * **Attributes:** Define attributes with appropriate types (`java.lang.String`, `java.lang.Integer`, `java.util.Date`, `boolean`, custom enums).
      * **Relations:** Use `<relation>` tags for relationships between item types (`one-to-many`, `many-to-many`). Define deployment tables for many-to-many relations.
      * **Enums:** Define custom enumerations using `<enumtype>`.
      * **Avoid Jalo Customization:** Do not generate or modify Jalo classes directly. Always work with the Service Layer and Models.

4.  **Spring Configuration (Core `*-spring.xml`):**

      * Define all Services, DAOs, and Facades as Spring beans.
      * Use constructor injection or `@Autowired` for dependencies.
      * Import other Spring configuration files using `<import resource="..." />`.
      * Follow bean naming conventions (e.g., `<bean id="defaultMyFeatureService" class="com.myproject.myextension.core.service.impl.DefaultMyFeatureService">`).

5.  **Spring Beans Configuration (Facade Layer `*-beans.xml`):**

      * Define the **Data Transfer Objects (DTOs)** used by the Facade layer.
      * Configure **Populators and Converters** for mapping between Models (from Service/DAO layer) and DTOs (for Facade/Controller layer). This is critical for the Facade pattern.
      * This file is often imported into `*-spring.xml`.
      * Use `alias` for DTOs if they match existing names for consistency.

6.  **Web Module Spring Configuration (`*-web-spring.xml` or similar):**

      * If the feature involves **web-tier components** (e.g., custom controllers, view resolvers, message sources, or Spring Security configurations), generate appropriate XML files like `myextension-web-spring.xml` or `myextension-spring-security-config.xml`.
      * For **Accelerator AddOns**, this often means updating the `*-web-spring.xml` in the `web/webroot/WEB-INF/config/` directory.
      * Define beans specific to the web layer here (e.g., `acceleratorUrlConverter`, custom `cmsPageTitleResolver`).
      * If custom controllers are created, ensure they are correctly registered via `<context:component-scan>` if not already.

7.  **Logging:** Use SLF4j/Log4j for logging (e.g., `private static final Logger LOG = LoggerFactory.getLogger(DefaultMyFeatureService.class);`).

8.  **Error Handling:**

      * Catch specific exceptions and wrap them in custom `ServiceException` or `IntegrationException` as needed.
      * Provide meaningful error messages.

9.  **ImpEx (for initial data/configuration):**

      * If the HCL Commerce feature involved data setup or configuration, consider how this would be migrated to ImpEx scripts.
      * Generate ImpEx for `items.xml` definitions (essential for creating type instances).
      * Suggest ImpEx for initial master data if applicable.

10. **Security (Basic):**

      * Avoid direct SQL injection (use FlexibleSearch parameters).
      * Consider Hybris security annotations for controllers if applicable (`@Secured`).

11. **Naming Conventions:**

      * Extension names: All lowercase, descriptive.
      * Java packages: Follow standard Java conventions (`com.mycompany.myextension.core.service.impl`).
      * Class names: PascalCase (`MyFeatureService`, `DefaultMyFeatureDAO`).
      * Method names: camelCase (`findById`, `createFeature`).
      * Spring bean IDs: camelCase (`defaultMyFeatureService`).

12. **Testability:**

      * Encourage writing clean, testable code. Suggest basic JUnit structure for services/DAOs.

**Conversion Instructions (reiterated and refined):**

1.  **Analyze and Map:** Carefully analyze the HCL Commerce code and the feature flow. Map each HCL component (servlet, command, utility, EJB) to its most appropriate SAP Commerce equivalent (Controller, Facade, Service, DAO, Model).
2.  **Generate Layered Code:** Produce separate Java files for Services (interfaces and implementations), DAOs (interfaces and implementations), Facades (if applicable), and Spring MVC Controllers.
3.  **Define Items.xml:** Create or extend the `items.xml` file to represent any custom data models required by the feature, adhering to the best practices above.
4.  **Configure Spring Beans (Core):** Provide the necessary Spring XML configuration (`-spring.xml` files for core beans) to wire up all the new components as beans.
5.  **Configure Spring Beans (Facade/DTOs):** Generate or suggest updates to `*-beans.xml` files to define DTOs, Populators, and Converters for the Facade layer.
6.  **Configure Spring Beans (Web):** If the feature has web-specific components, generate or suggest updates to relevant web-tier Spring XML files (e.g., `myextension-web-spring.xml`) for view resolvers, message sources, or web-specific bean definitions.
7.  **Generate ImpEx (if data creation is part of the flow):** If the HCL code involved creating specific data instances, generate sample ImpEx for those.
8.  **Add Explanatory Comments:** Include comments in the generated code explaining the conversion logic, design choices, and any assumptions made. Highlight areas that might require manual review or further refinement.
9.  **Prioritize Standard Hybris APIs:** Whenever possible, use out-of-the-box SAP Commerce services and APIs (e.g., `modelService`, `flexibleSearchService`, `userService`, `cartService`, etc.) instead of re-implementing common functionality.

**Output Format:**
Provide the converted SAP Commerce code for each generated file. Each file should be clearly separated using the delimiter `--- FILE: <suggested/relative/path/from/extension/root> ---`. Do not include any conversational text before or after the file contents, only the file content itself.

**Example Output Format (start your response EXACTLY like this):**

--- FILE: myextension/extensioninfo.xml ---

```xml
<extension name='myextension' ...>
    <requires-extension name='acceleratorstorefrontcommons'/>
    <requires-extension name='commercefacades'/>
    <coremodule generated='true' manager='de.myproject.myextension.core.jalo.MyextensionManager'
                packageroot='de.myproject.myextension.core'/>
    <webmodule webroot='/myextensionweb' uiwebroot='/myextensionweb'/>
</extension>
```

--- FILE: myextension/resources/myextension-items.xml ---

```xml
<?xml version="1.0" encoding="ISO-8859-1"?>
<items xmlns:xsi="[http://www.w3.org/2001/XMLSchema-instance](http://www.w3.org/2001/XMLSchema-instance)" xsi:noNamespaceSchemaLocation="items.xsd">
    <collectiontypes>
        <collectiontype code="MyCustomStringList" elementtype="java.lang.String" autocreate="true" generate="true"/>
    </collectiontypes>
    <itemtypes>
        <item type="MyProjectFeatureData" extends="GenericItem" autocreate="true" generate="true">
            <deployment table="MyProjectFeatureData" typecode="12345"/>
            <attributes>
                <attribute qualifier="featureId" type="java.lang.String" unique="true">
                    <modifiers optional="false" initial="true"/>
                </attribute>
                <attribute qualifier="status" type="MyProjectFeatureStatus" autocreate="true">
                    <modifiers optional="false"/>
                </attribute>
            </attributes>
        </item>
    </itemtypes>
    <enumtypes>
        <enumtype code="MyProjectFeatureStatus" autocreate="true" generate="true">
            <value code="PENDING"/>
            <value code="PROCESSED"/>
            <value code="FAILED"/>
        </enumtype>
    </enumtypes>
    <relations>
        <relation code="MyProjectUserToFeatureDataRelation" localized="false" autocreate="true" generate="true">
            <sourceElement type="Customer" qualifier="customer" cardinality="one">
                <modifiers read="true" write="true" search="true" optional="false"/>
            </sourceElement>
            <targetElement type="MyProjectFeatureData" qualifier="featureData" cardinality="many">
                <modifiers read="true" write="true" search="true" optional="true"/>
            </targetElement>
        </relation>
    </relations>
</items>
```

--- FILE: myextension/resources/myextension-spring.xml ---

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="[http://www.springframework.org/schema/beans](http://www.springframework.org/schema/beans)"
       xmlns:xsi="[http://www.w3.org/2001/XMLSchema-instance](http://www.w3.org/2001/XMLSchema-instance)"
       xmlns:aop="[http://www.springframework.org/schema/aop](http://www.springframework.org/schema/aop)"
       xmlns:context="[http://www.springframework.org/schema/context](http://www.springframework.org/schema/context)"
       xsi:schemaLocation="[http://www.springframework.org/schema/beans](http://www.springframework.org/schema/beans)
       [http://www.springframework.org/schema/beans/spring-beans.xsd](http://www.springframework.org/schema/beans/spring-beans.xsd)
       [http://www.springframework.org/schema/aop](http://www.springframework.org/schema/aop)
       [http://www.springframework.org/schema/aop/spring-aop.xsd](http://www.springframework.org/schema/aop/spring-aop.xsd)
       [http://www.springframework.org/schema/context](http://www.springframework.org/schema/context)
       [http://www.springframework.org/schema/context/spring-context.xsd](http://www.springframework.org/schema/context/spring-context.xsd)">

    <context:annotation-config/>

    <import resource="classpath:/myextension/resources/myextension-spring-beans.xml"/>

    <bean id="myFeatureService" parent="abstractService"
          class="de.myproject.myextension.core.service.impl.DefaultMyFeatureService">
        <property name="myFeatureDAO" ref="myFeatureDAO"/>
    </bean>

    <bean id="myFeatureDAO" parent="abstractDao"
          class="de.myproject.myextension.core.dao.impl.DefaultMyFeatureDAO">
    </bean>

    <bean id="myFeatureFacade" class="de.myproject.myextension.facades.impl.DefaultMyFeatureFacade">
        <property name="myFeatureService" ref="myFeatureService"/>
        <property name="myFeatureDataConverter" ref="myFeatureDataConverter"/> </bean>

</beans>
```

--- FILE: myextension/resources/myextension-spring-beans.xml ---

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="[http://www.springframework.org/schema/beans](http://www.springframework.org/schema/beans)"
       xmlns:xsi="[http://www.w3.org/2001/XMLSchema-instance](http://www.w3.org/2001/XMLSchema-instance)"
       xmlns:context="[http://www.springframework.org/schema/context](http://www.springframework.org/schema/context)"
       xsi:schemaLocation="[http://www.springframework.org/schema/beans](http://www.springframework.org/schema/beans)
       [http://www.springframework.org/schema/beans/spring-beans.xsd](http://www.springframework.org/schema/beans/spring-beans.xsd)
       [http://www.springframework.org/schema/context](http://www.springframework.org/schema/context)
       [http://www.springframework.org/schema/context/spring-context.xsd](http://www.springframework.org/schema/context/spring-context.xsd)">

    <alias name="defaultMyFeatureData" alias="myFeatureData"/>
    <bean id="defaultMyFeatureData" class="de.myproject.myextension.data.MyFeatureDataDTO" scope="prototype"/>

    <alias name="defaultMyFeatureDataPopulator" alias="myFeatureDataPopulator"/>
    <bean id="defaultMyFeatureDataPopulator"
          class="de.myproject.myextension.facades.populators.MyFeatureDataPopulator">
        </bean>

    <alias name="defaultMyFeatureDataConverter" alias="myFeatureDataConverter"/>
    <bean id="defaultMyFeatureDataConverter" parent="abstractPopulatingConverter">
        <property name="targetClass" value="de.myproject.myextension.data.MyFeatureDataDTO"/>
        <property name="populators">
            <list>
                <ref bean="myFeatureDataPopulator"/>
                </list>
        </property>
    </bean>

    </beans>
```

--- FILE: myextension/web/webroot/WEB-INF/config/myextension-web-spring.xml ---

```xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="[http://www.springframework.org/schema/beans](http://www.springframework.org/schema/beans)"
       xmlns:xsi="[http://www.w3.org/2001/XMLSchema-instance](http://www.w3.org/2001/XMLSchema-instance)"
       xmlns:context="[http://www.springframework.org/schema/context](http://www.springframework.org/schema/context)"
       xmlns:mvc="[http://www.springframework.org/schema/mvc](http://www.springframework.org/schema/mvc)"
       xsi:schemaLocation="[http://www.springframework.org/schema/beans](http://www.springframework.org/schema/beans)
       [http://www.springframework.org/schema/beans/spring-beans.xsd](http://www.springframework.org/schema/beans/spring-beans.xsd)
       [http://www.springframework.org/schema/context](http://www.springframework.org/schema/context)
       [http://www.springframework.org/schema/context/spring-context.xsd](http://www.springframework.org/schema/context/spring-context.xsd)
       [http://www.springframework.org/schema/mvc](http://www.springframework.org/schema/mvc)
       [http://www.springframework.org/schema/mvc/spring-mvc.xsd](http://www.springframework.org/schema/mvc/spring-mvc.xsd)">

    <mvc:annotation-driven />
    <context:annotation-config/>

    <context:component-scan base-package="de.myproject.myextension.controllers"/>
    <context:component-scan base-package="de.myproject.myextension.controllers.pages"/>
    <context:component-scan base-package="de.myproject.myextension.controllers.api"/>

    <bean id="myFeatureViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/responsive/pages/myfeature/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean id="myExtensionWebMessages" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="classpath:/myextension/messages/messages"/>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

</beans>
```

--- FILE: myextension/src/myextension/core/service/MyFeatureService.java ---

```java
package de.myproject.myextension.core.service;

import de.hybris.platform.core.model.customer.CustomerModel;
import de.myproject.myextension.core.model.MyProjectFeatureDataModel;
import de.myproject.myextension.core.exceptions.MyFeatureServiceException;

import java.util.List;
import java.util.Optional;

/**
 * Service interface for managing MyProjectFeatureData.
 */
public interface MyFeatureService {{

    /**
     * Creates a new MyProjectFeatureData entry.
     * @param customer The customer associated with the feature.
     * @param someInputParameter A parameter from the HCL code's business logic.
     * @return The newly created MyProjectFeatureDataModel.
     * @throws MyFeatureServiceException if creation fails due to business rules.
     */
    MyProjectFeatureDataModel createMyFeatureData(CustomerModel customer, String someInputParameter) throws MyFeatureServiceException;

    /**
     * Finds MyProjectFeatureData by its unique ID.
     * @param featureId The unique ID.
     * @return An Optional containing the MyProjectFeatureDataModel, or empty if not found.
     */
    Optional<MyProjectFeatureDataModel> getMyFeatureDataById(String featureId);

    /**
     * Retrieves all feature data for a given customer.
     * @param customer The customer.
     * @return A list of MyProjectFeatureDataModels.
     */
    List<MyProjectFeatureDataModel> getFeatureDataForCustomer(CustomerModel customer);

    // Map other HCL Commerce command/logic methods here
}}
```

--- FILE: myextension/src/myextension/core/service/impl/DefaultMyFeatureService.java ---

```java
package de.myproject.myextension.core.service.impl;

import de.myproject.myextension.core.service.MyFeatureService;
import de.myproject.myextension.core.dao.MyFeatureDAO;
import de.myproject.myextension.core.model.MyProjectFeatureDataModel;
import de.myproject.myextension.core.exceptions.MyFeatureServiceException;
import de.hybris.platform.core.model.customer.CustomerModel;
import de.hybris.platform.servicelayer.model.ModelService;
import de.hybris.platform.servicelayer.search.FlexibleSearchService;
import de.hybris.platform.servicelayer.exceptions.ModelSavingException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Optional;

/**
 * Default implementation of {{@link MyFeatureService}}.
 */
public class DefaultMyFeatureService implements MyFeatureService {{

    private static final Logger LOG = LoggerFactory.getLogger(DefaultMyFeatureService.class);

    private ModelService modelService;
    private MyFeatureDAO myFeatureDAO;
    // Inject other services like userService, commonI18NService etc. as needed

    @Override
    public MyProjectFeatureDataModel createMyFeatureData(final CustomerModel customer, final String someInputParameter) throws MyFeatureServiceException {{
        // Map HCL Commerce business logic here
        if (customer == null) {{
            throw new MyFeatureServiceException("Customer cannot be null for feature data creation.");
        }}

        final MyProjectFeatureDataModel newFeatureData = modelService.create(MyProjectFeatureDataModel.class);
        newFeatureData.setCustomer(customer);
        newFeatureData.setFeatureId(generateUniqueFeatureId());
        newFeatureData.setStatus(MyProjectFeatureStatus.PENDING);
        newFeatureData.setSomeInputParameter(someInputParameter);

        try {{
            modelService.save(newFeatureData);
            LOG.info("Created new feature data with ID: {{}}", newFeatureData.getFeatureId());
            return newFeatureData;
        }} catch (final ModelSavingException e) {{
            LOG.error("Could not save new feature data for customer {{}}: {{}}", customer.getUid(), e.getMessage(), e);
            throw new MyFeatureServiceException("Failed to save feature data.", e);
        }}
    }}

    @Override
    public Optional<MyProjectFeatureDataModel> getMyFeatureDataById(final String featureId) {{
        return myFeatureDAO.findMyFeatureDataById(featureId);
    }}

    @Override
    public List<MyProjectFeatureDataModel> getFeatureDataForCustomer(final CustomerModel customer) {{
        return myFeatureDAO.findFeatureDataForCustomer(customer);
    }}


    private String generateUniqueFeatureId() {{
        return "FEATURE_" + System.currentTimeMillis();
    }}

    public void setModelService(final ModelService modelService) {{
        this.modelService = modelService;
    }}

    public void setMyFeatureDAO(final MyFeatureDAO myFeatureDAO) {{
        this.myFeatureDAO = myFeatureDAO;
    }}
}}
```

--- FILE: myextension/src/myextension/core/dao/MyFeatureDAO.java ---

```java
package de.myproject.myextension.core.dao;

import de.hybris.platform.core.model.customer.CustomerModel;
import de.myproject.myextension.core.model.MyProjectFeatureDataModel;

import java.util.List;
import java.util.Optional;

/**
 * Data Access Object for {{@link MyProjectFeatureDataModel}}.
 */
public interface MyFeatureDAO {{

    /**
     * Finds a single {{@link MyProjectFeatureDataModel}} by its unique identifier.
     * @param featureId The unique ID of the feature data.
     * @return An {{@link Optional}} containing the found model, or empty if not found.
     */
    Optional<MyProjectFeatureDataModel> findMyFeatureDataById(String featureId);

    /**
     * Finds all {{@link MyProjectFeatureDataModel}}s associated with a specific customer.
     * @param customer The customer model.
     * @return A list of {{@link MyProjectFeatureDataModel}}s, or an empty list if none are found.
     */
    List<MyProjectFeatureDataModel> findFeatureDataForCustomer(CustomerModel customer);

    // Map other HCL data retrieval methods here
}}
```

--- FILE: myextension/src/myextension/core/dao/impl/DefaultMyFeatureDAO.java ---

```java
package de.myproject.myextension.core.dao.impl;

import de.myproject.myextension.core.dao.MyFeatureDAO;
import de.myproject.myextension.core.model.MyProjectFeatureDataModel;
import de.hybris.platform.core.model.customer.CustomerModel;
import de.hybris.platform.servicelayer.search.FlexibleSearchQuery;
import de.hybris.platform.servicelayer.search.FlexibleSearchService;
import de.hybris.platform.servicelayer.search.SearchResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * Default implementation of {{@link MyFeatureDAO}}.
 */
public class DefaultMyFeatureDAO implements MyFeatureDAO {{

    private static final Logger LOG = LoggerFactory.getLogger(DefaultMyFeatureDAO.class);

    private FlexibleSearchService flexibleSearchService;

    @Override
    public Optional<MyProjectFeatureDataModel> findMyFeatureDataById(final String featureId) {{
        final String query = "SELECT {{pk}} FROM {{MyProjectFeatureData}} WHERE {{featureId}} = ?featureId";
        final Map<String, Object> params = new HashMap<>();
        params.put("featureId", featureId);

        final FlexibleSearchQuery fsQuery = new FlexibleSearchQuery(query, params);
        try {{
            final SearchResult<MyProjectFeatureDataModel> result = flexibleSearchService.search(fsQuery);
                return result.getResult().stream().findFirst();
            }} catch (final Exception e) {{
                LOG.error("Error finding MyProjectFeatureData by ID {{}}: {{}}", featureId, e.getMessage(), e);
                return Optional.empty();
            }}
        }}

    @Override
    public List<MyProjectFeatureDataModel> findFeatureDataForCustomer(final CustomerModel customer) {{
        final String query = "SELECT {{pk}} FROM {{MyProjectFeatureData}} WHERE {{customer}} = ?customerPk";
        final Map<String, Object> params = new HashMap<>();
        params.put("customerPk", customer.getPk());

        final FlexibleSearchQuery fsQuery = new FlexibleSearchQuery(query, params);
        try {{
            final SearchResult<MyProjectFeatureDataModel> result = flexibleSearchService.search(fsQuery);
            return result.getResult();
        }} catch (final Exception e) {{
            LOG.error("Error finding MyProjectFeatureData for customer {{}}: {{}}", customer.getUid(), e.getMessage(), e);
            return Collections.emptyList();
        }}
    }}

    public void setFlexibleSearchService(final FlexibleSearchService flexibleSearchService) {{
        this.flexibleSearchService = flexibleSearchService;
    }}
}}
```

--- FILE: myextension/src/myextension/facades/populators/MyFeatureDataPopulator.java ---

```java
package de.myproject.myextension.facades.populators;

import de.myproject.myextension.core.model.MyProjectFeatureDataModel;
import de.myproject.myextension.data.MyFeatureDataDTO;
import de.hybris.platform.converters.Populator;
import de.hybris.platform.servicelayer.dto.converter.ConversionException;
import org.springframework.util.Assert;

/**
 * Populator to convert {{@link MyProjectFeatureDataModel}} to {{@link MyFeatureDataDTO}}.
 */
public class MyFeatureDataPopulator implements Populator<MyProjectFeatureDataModel, MyFeatureDataDTO> {{

    @Override
    public void populate(final MyProjectFeatureDataModel source, final MyFeatureDataDTO target) throws ConversionException {{
        Assert.notNull(source, "Parameter source cannot be null.");
        Assert.notNull(target, "Parameter target cannot be null.");

        // Map simple attributes directly
        target.setFeatureId(source.getFeatureId());
        target.setStatus(source.getStatus().getCode()); // Assuming status is an enum with a getCode() method
        target.setSomeOtherField(source.getSomeOtherField()); // Map other fields from model to DTO

        // Handle more complex mappings, e.g., nested objects or date formatting
        if (source.getCreationtime() != null) {{
            target.setCreationDate(source.getCreationtime()); // Or format as string: new SimpleDateFormat("yyyy-MM-dd").format(source.getCreationtime())
        }}
        // If the HCL had logic to display associated user, you might populate user details here
        if (source.getCustomer() != null) {{
                 target.setCustomerUid(source.getCustomer().getUid());
                 target.setCustomerName(source.getCustomer().getName());
        }}
    }}
}}
```

--- FILE: myextension/src/myextension/data/MyFeatureDataDTO.java ---

```java
package de.myproject.myextension.data;

import java.util.Date;

/**
 * Data Transfer Object for MyFeature data.
 * This DTO is exposed by the Facade layer.
 */
public class MyFeatureDataDTO {{

    private String featureId;
    private String status; // Using String for DTO, can be mapped from enum
    private Date creationDate;
    private String someOtherField; // Example field from HCL
    private String customerUid;
    private String customerName;

    // Getters and Setters
    public String getFeatureId() {{
        return featureId;
    }}

    public void setFeatureId(String featureId) {{
        this.featureId = featureId;
    }}

    public String getStatus() {{
        return status;
    }}

    public void setStatus(String status) {{
        this.status = status;
    }}

    public Date getCreationDate() {{
        return creationDate;
    }}

    public void setCreationDate(Date creationDate) {{
        this.creationDate = creationDate;
    }}

    public String getSomeOtherField() {{
        return someOtherField;
    }}

    public void setSomeOtherField(String someOtherField) {{
        this.someOtherField = someOtherField;
    }}

    public String getCustomerUid() {{
        return customerUid;
    }}

    public void setCustomerUid(String customerUid) {{
        this.customerUid = customerUid;
    }}

    public String getCustomerName() {{
        return customerName;
    }}

    public void setCustomerName(String customerName) {{
        this.customerName = customerName;
    }}
}}
```

--- FILE: myextension/web/src/myextension/controllers/pages/MyFeatureController.java ---

```java
package de.myproject.myextension.controllers.pages;

import de.myproject.myextension.facades.MyFeatureFacade;
import de.myproject.myextension.data.MyFeatureDataDTO;
import de.myproject.myextension.core.exceptions.MyFeatureServiceException;
import de.hybris.platform.acceleratorstorefrontcommons.controllers.pages.AbstractPageController;
import de.hybris.platform.acceleratorstorefrontcommons.annotations.RequireHardLogIn;
import de.hybris.platform.acceleratorstorefrontcommons.breadcrumb.Breadcrumb;
import de.hybris.platform.acceleratorstorefrontcommons.constants.WebConstants;
import de.hybris.platform.acceleratorstorefrontcommons.controllers.util.GlobalMessages;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Resource;

import static de.hybris.platform.acceleratorstorefrontcommons.controllers.AbstractPageController.REDIRECT_PREFIX;


/**
 * Controller for MyFeature functionality.
 */
@Controller
@RequestMapping("/myfeature")
public class MyFeatureController extends AbstractPageController {{

    private static final Logger LOG = LoggerFactory.getLogger(MyFeatureController.class);

    @Resource(name = "myFeatureFacade")
    private MyFeatureFacade myFeatureFacade;

    @RequestMapping(value = "/view", method = RequestMethod.GET)
    @RequireHardLogIn
    public String viewMyFeaturePage(final Model model) {{
        storeCmsPageInModel(model, getContentPageForLabelOrId("myFeaturePage"));
        setUpMetaDataForContentPage(model, getContentPageForLabelOrId("myFeaturePage"));
        model.addAttribute(WebConstants.BREADCRUMBS_KEY,
            simpleBreadcrumb.builder().target("/myfeature/view").title("My Feature").build()));

        try {{
            final MyFeatureDataDTO featureData = myFeatureFacade.getMyFeatureForCurrentUser();
            model.addAttribute("featureData", featureData);
        }} catch (final Exception e) {{
            LOG.error("Error fetching my feature data: {{}}", e.getMessage(), e);
            GlobalMessages.addErrorMessage(model, "myfeature.error.loading");
        }}
        return getViewForPage(model);
    }}

    @RequestMapping(value = "/process", method = RequestMethod.POST)
    @RequireHardLogIn
    public String processMyFeature(@RequestParam("action") final String action,
                                    final RedirectAttributes redirectAttributes) {{
        try {{
            myFeatureFacade.processFeatureAction(action);
            GlobalMessages.addFlashMessage(redirectAttributes, GlobalMessages.CONF_MESSAGES_HOLDER, "myfeature.success.processed");
            return REDIRECT_PREFIX + "/myfeature/view";
        }} catch (final MyFeatureServiceException e) {{
            LOG.error("Failed to process feature action '{{}}': {{}}", action, e.getMessage(), e);
            GlobalMessages.addFlashMessage(redirectAttributes, GlobalMessages.ERROR_MESSAGES_HOLDER, "myfeature.error.processing");
            return REDIRECT_PREFIX + "/myfeature/view";
        }} catch (final Exception e) {{
            LOG.error("An unexpected error occurred while processing feature action '{{}}': {{}}", action, e.getMessage(), e);
            GlobalMessages.addFlashMessage(redirectAttributes, GlobalMessages.ERROR_MESSAGES_HOLDER, "myfeature.error.general");
            return REDIRECT_PREFIX + "/myfeature/view";
        }}
    }}
}}
```

--- FILE: myextension/web/webroot/WEB-INF/views/responsive/pages/myfeature/myFeaturePage.jsp ---

```jsp
<%--
    MyFeaturePage.jsp - Sample JSP for the MyFeatureController.
    This file would contain the presentation logic using JSTL/Spring tags,
    and display data retrieved by the controller from the facade.
--%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="[http://java.sun.com/jsp/jstl/core](http://java.sun.com/jsp/jstl/core)"%>
<%@ taglib prefix="spring" uri="[http://www.springframework.org/tags](http://www.springframework.org/tags)"%>
<%@ taglib prefix="form" uri="[http://www.springframework.org/tags/form](http://www.springframework.org/tags/form)"%>
<%@ taglib prefix="cms" uri="[http://hybris.com/cms2/tags](http://hybris.com/cms2/tags)"%>
<%@ taglib prefix="fn" uri="[http://java.sun.com/jsp/jstl/functions](http://java.sun.com/jsp/jstl/functions)" %>

<spring:url value="/myfeature/process" var="processFeatureUrl"/>

<cms:pageSlot position="MyFeatureContent" var="featureContent">
    <cms:component component="${{featureContent}}"/>
</cms:pageSlot>

<div class="my-feature-container">
    <h1><spring:theme code="myfeature.page.title"/></h1>

    <c:if test="${{not empty featureData}}">
        <p>Feature ID: ${{featureData.featureId}}</p>
        <p>Status: ${{featureData.status}}</p>
        <p>Last Processed: ${{featureData.lastProcessedDate}}</p>
        </c:if>
    <c:if test="${{empty featureData}}">
        <p><spring:theme code="myfeature.no.data.found"/></p>
    </c:if>

    <form action="${{processFeatureUrl}}" method="post">
        <button type="submit" name="action" value="enable">Enable Feature</button>
        <button type="submit" name="action" value="disable">Disable Feature</button>
        <input type="hidden" name="${{_csrf.parameterName}}" value="${{_csrf.token}}"/>
    </form>

    <div class="messages">
        <cms:pageSlot position="GlobalMessages" var="globalMessages">
            <cms:component component="${{globalMessages}}"/>
        </cms:pageSlot>
    </div>
</div>
```

--- FILE: myextension/resources/myextension_en.properties ---

```properties
# Labels for myextension
myfeature.page.title=My Custom Feature
myfeature.error.loading=Failed to load feature data. Please try again.
myfeature.success.processed=Feature action processed successfully.
myfeature.error.processing=Error processing feature action.
myfeature.error.general=An unexpected error occurred.
myfeature.no.data.found=No feature data available.
```